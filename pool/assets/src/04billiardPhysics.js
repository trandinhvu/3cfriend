function billiardPhysics(t,i,e,o,s,n){this.targetID=-1,this.omissionArray=new Array,this.ballArray=i,this.lineArray=e,this.vertexArray=o,this.pocketArray=s,this.simType=n,this.simType=0,this.contactEvent=t}billiardPhysics.prototype={set ballData(t){this.ballArray=t},set frameNumber(t){this.frame=t}},billiardPhysics.prototype.updatePhysics=function(){this.predictCollisions(),this.updateFriction()},billiardPhysics.prototype.predictCollisions=function(){var t=0,i=0;do{var e,o=1;s&&s.length;var s=new Array,n=Maths.fixNumber(1-t),r=0;0==this.simType&&(r=this.ballArray.length),1==this.simType&&(r=1),2==this.simType&&(r=-1==this.targetID?1:this.ballArray.length);for(var a=0;a<r;a++){var l=!1;2==this.simType&&-1!=this.targetID&&a!=this.targetID&&0!=a&&(l=!0);var c=this.ballArray[a];if(1==c.active&&0==l){for(var y=c.position.plus(c.velocity.times(n)),p=2==this.simType?0:a;p<this.ballArray.length;p++){var h=this.ballArray[p];if(0!=c.velocity.magnitudeSquared||0!=h.velocity.magnitudeSquared){var m=!0;if(this.simType,h!=c&&1==h.active&&1==m&&Maths.checkObjectsConverging(c.position,h.position,c.velocity,h.velocity)){var v=c.velocity.minus(h.velocity),u=c.position.plus(v.times(n)),d=new Point(c.position.x,c.position.y),b=new Point(u.x,u.y),g=new Point(h.position.x,h.position.y),w=2*this.ballRadius,f=Maths.lineIntersectCircle(d,b,g,w);
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if(1==f.intersects||1==f.inside){var x,P,j;if(null!=f.exit&&(x=f.exit),null!=f.enter&&(x=f.enter),1==f.intersects){P=new Vector2D(x.x,x.y);var A=Maths.createVectorFrom2Points(d,b),S=Maths.createVectorFrom2Points(d,x);j=Maths.fixNumber(t+S.magnitude/A.magnitude*n)}if(1==f.inside){var I=c.position.minus(h.position).normalize();P=h.position.plus(I.times(w)),j=t}j<o?(o=j,(e=new Object).type="ball",e.object=c,e.time=o,1==f.intersects&&(e.objectIntersectPoint=c.position.plus(c.velocity.times(o-t)),e.targetIntersectPoint=h.position.plus(h.velocity.times(o-t))),1==f.inside&&(e.objectIntersectPoint=P,e.targetIntersectPoint=h.position),e.target=h,(s=new Array).push(e)):j==o&&1!=j&&(o=j,(e=new Object).type="ball",e.object=c,e.time=o,e.objectIntersectPoint=c.position.plus(c.velocity.times(o-t)),e.target=h,e.targetIntersectPoint=h.position.plus(h.velocity.times(o-t)),1==f.inside&&(e.objectIntersectPoint=P,e.targetIntersectPoint=h.position),s.push(e))}}}}if(0!=c.velocity.magnitudeSquared){for(var V=0;V<this.lineArray.length;V++){var M=this.lineArray[V],D=new Phaser.Line(c.position.x,c.position.y,y.x,y.y).intersects(new Phaser.Line(M.p3.x,M.p3.y,M.p4.x,M.p4.y));if(null==D&&null!=(D=Maths.lineIntersectLine(new Point(c.position.x,c.position.y),new Point(y.x,y.y),new Point(M.p5.x,M.p5.y),new Point(M.p6.x,M.p6.y)))){window.famobi.log("!!! SAVED BY SECOND LINE  !!! Ball: "+c.id+", line: "+M.name+", Frame: "+this.frame);var O=new Vector2D(D.x,D.y),T=M.normal.times(.2*this.ballRadius);intersectPointAsVec=O.plus(T),D=new Point(intersectPointAsVec.x,intersectPointAsVec.y)}if(null!=D){var C=new Vector2D(D.x,D.y),N=Maths.createVectorFrom2Points(c.position,y),R=Maths.createVectorFrom2Points(c.position,C),F=Maths.fixNumber(t+R.magnitude/N.magnitude*n);F<o?(o=F,(e=new Object).type="line",e.time=o,e.object=c,e.objectIntersectPoint=C,e.target=M,(s=new Array).push(e)):F==o&&1!=F&&(o=F,(e=new Object).type="line",e.time=o,e.object=c,e.objectIntersectPoint=C,e.target=M,s.push(e),window.famobi.log("double collision (line): frame "+this.frame))}}for(var E=0;E<this.vertexArray.length;E++){var k=this.vertexArray[E];m=!0;if(1!=this.simType&&(m=Math.abs(c.position.x-k.position.x)<8e3&&Math.abs(c.position.y-k.position.y)<8e3),1==m){var z=new Point(c.position.x,c.position.y),L=new Point(y.x,y.y),B=new Point(k.position.x,k.position.y),q=1*this.ballRadius,H=Maths.lineIntersectCircle(z,L,B,q);if(1==H.intersects||1==H.inside){var G,X,Y;if(null!=H.enter&&(G=H.enter,8==c.id&&k.name),null!=H.exit&&(G=H.exit,window.famobi.log("!!!!!!   EXIT !!!!!!!!!!!!!!!: frame "+this.frame)),null!=H.enter&&null!=H.exit&&(window.famobi.log("!!!!!! STRAIGHT THROUGH !!!!!!!!!!!!!!!: frame "+this.frame),G=H.enter),null==H.enter&&null!=H.exit&&window.famobi.log("!!!!!! EXIT ONLY !!!!!!!!!!!!!!!: frame "+this.frame),1==H.intersects){X=new Vector2D(G.x,G.y);var U=Maths.createVectorFrom2Points(z,L),J=Maths.createVectorFrom2Points(z,G);Y=Maths.fixNumber(t+J.magnitude/U.magnitude*n)}if(1==H.inside){var K=c.position.plus(c.velocity.normalize().times(2*-q)),Q=new Point(K.x,K.y);G=Maths.lineIntersectCircle(z,Q,B,q).exit,X=new Vector2D(G.x,G.y),Y=t,window.famobi.log("overlapping vertex: frame "+this.frame)}Y<o?(o=Y,(e=new Object).type="vertex",e.object=c,e.time=o,e.objectIntersectPoint=X,e.target=k,(s=new Array).push(e)):Y==o&&1!=Y&&(o=Y,(e=new Object).type="vertex",e.object=c,e.time=o,1==H.intersects&&(e.objectIntersectPoint=new Vector2D(G.x,G.y)),1==H.inside&&(e.objectIntersectPoint=X),e.target=k,s.push(e),window.famobi.log("double collision (vertex): frame "+this.frame))}}}for(var W=0;W<this.pocketArray.length;W++){var Z=this.pocketArray[W];m=!0;1!=this.simType&&(m=Math.abs(c.position.x-Z.position.x)<8e3&&Math.abs(c.position.y-Z.position.y)<8e3);var $=!1;if(1==m){var _=Z.position.minus(c.position).normalize();c.velocity.dot(_)>0&&($=!0)}if(1==$&&1==m){var tt,it=new Point(c.position.x,c.position.y),et=new Point(y.x,y.y),ot=new Point(Z.position.x,Z.position.y);tt=Z.radius?Z.radius:this.pocketRadius;var st=Maths.lineIntersectCircle(it,et,ot,tt);if(1==st.intersects||1==st.inside){var nt,rt,at;if(null!=st.enter&&(nt=st.enter),null!=st.exit&&(nt=st.exit),1==st.intersects){rt=new Vector2D(nt.x,nt.y);var lt=Maths.createVectorFrom2Points(it,et),ct=Maths.createVectorFrom2Points(it,nt);at=Maths.fixNumber(t+ct.magnitude/lt.magnitude*n)}if(1==st.inside){var yt=Maths.createVectorFrom2Points(ot,it).normalize();rt=new Vector2D(ot.x,ot.y).plus(yt.times(tt)),at=t}at<o?(o=at,(e=new Object).type="pocket",e.object=c,e.time=o,1==st.intersects&&(e.objectIntersectPoint=new Vector2D(nt.x,nt.y)),1==st.inside&&(e.objectIntersectPoint=rt),e.target=Z,(s=new Array).push(e)):at==o&&1!=at&&(o=at,(e=new Object).type="pocket",e.object=c,e.time=o,1==st.intersects&&(e.objectIntersectPoint=new Vector2D(nt.x,nt.y)),1==st.inside&&(e.objectIntersectPoint=rt),e.target=Z,s.push(e))}}}}}}s.length>0&&this.resolveCollision(s);var pt=Maths.fixNumber(o-t);1!=this.simType&&this.moveBalls(pt),t=o,i++}while(s.length>0&&i<20)},billiardPhysics.prototype.resolveCollision=function(t){var i=playState.gameInfo;this.omissionArray=new Array,t.length;for(var e=0;e<t.length;e++){var o=t[e];if("ball"==o.type){o.time;(d=o.object).position=o.objectIntersectPoint;var s=o.target;-1==this.targetID&&(this.targetID=s.id),s.position=o.targetIntersectPoint,this.omissionArray.push(d),this.omissionArray.push(s);var n=s.position.minus(d.position).normalize(),r=(u=new Vector2D(n.x,n.y)).getRightNormal(),a=u.times(d.velocity.dot(u)),l=r.times(d.velocity.dot(r)),c=u.times(s.velocity.dot(u)),y=r.times(s.velocity.dot(r));Math.abs(s.ySpin)<Math.abs(d.ySpin)&&(s.ySpin=-.5*d.ySpin),0==d.id&&0==d.firstContact&&(d.deltaScrew=a.times(.17*-d.screw),d.type);var p=c.times(this.ballRestitution).plus(a.times(1-this.ballRestitution)),h=a.times(this.ballRestitution).plus(c.times(1-this.ballRestitution));d.velocity=l.plus(p),s.velocity=y.plus(h),0==this.simType&&h.magnitude>450&&(s.grip=0),d.lastCollisionObject=s,s.lastCollisionObject=d}if("line"==o.type){o.time,i.collisions++,(d=o.object).position=o.objectIntersectPoint;var m=o.target;this.omissionArray.push(d),d.ySpin+=-d.velocity.dot(m.direction)/100;d.ySpin>50&&(d.ySpin=50),d.ySpin<-50&&(d.ySpin=-50);a=m.normal.times(d.velocity.dot(m.normal)),l=m.direction.times(d.velocity.dot(m.direction));0==d.id&&(l=l.plus(m.direction.times(Maths.fixNumber(.2*d.english*d.velocity.magnitude))),d.english=Maths.fixNumber(.5*d.english),d.english>-.1&&d.english<.1&&(d.english=0)),d.velocity=a.times(-this.cushionRestitution).plus(l),0==this.simType&&a.magnitude>700&&(d.grip=0),d.lastCollisionObject=m,d.position=d.position.plus(m.normal.times(200)),0==d.id&&(d.deltaScrew=d.deltaScrew.times(.8))}if("vertex"==o.type){i.collisions++,(d=o.object).position=o.objectIntersectPoint;var v=o.target;this.omissionArray.push(d);var u;n=v.position.minus(d.position).normalize(),r=(u=new Vector2D(n.x,n.y)).getRightNormal(),a=u.times(d.velocity.dot(u)),l=r.times(d.velocity.dot(r));d.velocity=a.times(-this.cushionRestitution).plus(l),d.position=d.position.minus(u.times(200)),d.id,d.lastCollisionObject=v,d.lastVertex=v.name,0==d.id&&(d.deltaScrew=new Vector2D(0,0))}if("pocket"==o.type){var d;o.time,t.length,(d=o.object).position=o.objectIntersectPoint;o.target;this.omissionArray.push(d);var b=d.velocity.magnitude;d.hasOwnProperty("mc")}var g=new Object;g.collisionType=o.type,g.ball=d,g.target=o.target,g.ballVelocity=d.velocity,"ball"==o.type&&(g.targetVelocity=s.velocity,0==d.id&&(g.deltaScrew=d.deltaScrew)),"line"!=o.type&&"vertex"!=o.type||(g.normalVelocity=a),"pocket"==o.type&&(g.speed=b),this.sendContactEvent(g),"ball"==o.type&&((g=new Object).collisionType=o.type,g.ball=o.target,g.target=d,g.ballVelocity=o.target.velocity,g.targetVelocity=d.velocity,0==s.id&&(g.deltaScrew=o.target.deltaScrew),this.sendContactEvent(g))}t.length},billiardPhysics.prototype.sendContactEvent=function(t){this.contactEvent.dispatch(t)},billiardPhysics.prototype.moveBalls=function(t){for(var i=0;i<this.ballArray.length;i++){var e=this.ballArray[i];0!=this.omissionArray.length&&-1!=this.omissionArray.indexOf(e)||1==e.active&&(e.position=e.position.plus(e.velocity.times(t)))}this.omissionArray=new Array},billiardPhysics.prototype.updateFriction=function(){for(var t=0;t<this.ballArray.length;t++){var i=this.ballArray[t];0==i.id&&(i.velocity=i.velocity.plus(i.deltaScrew),i.deltaScrew.magnitude>0&&(i.deltaScrew=i.deltaScrew.times(.8),i.deltaScrew.magnitude<1&&(i.deltaScrew=new Vector2D(0,0))));var e=i.velocity.magnitude;e-=this.friction;var o=i.velocity.normalize();if(i.velocity=o.times(e),i.velocity.magnitude<this.minVelocity&&(i.velocity=new Vector2D(0,0)),i.grip<1&&(i.grip+=.02),i.ySpin>=.2&&(i.ySpin-=.2),i.ySpin<=-.2&&(i.ySpin+=.2),i.ySpin>=-.2&&i.ySpin<=.2&&(i.ySpin=0),0!=i.ySpin){var s=i.velocity.getLeftNormal().normalize().times(.3*i.ySpin*i.velocity.magnitude/800);i.velocity=i.velocity.plus(s)}}};